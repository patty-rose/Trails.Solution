// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrailsApi.Models;

namespace Trails.Migrations
{
    [DbContext(typeof(TrailsApiContext))]
    [Migration("20220921023004_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TrailsApi.Models.Trail", b =>
                {
                    b.Property<int>("TrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Difficulty")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TrailId");

                    b.ToTable("Trails");

                    b.HasData(
                        new
                        {
                            TrailId = 1,
                            Description = "stroll through Laurelhurst Park",
                            Difficulty = "easy",
                            Name = "Laurelhurst Stroll"
                        });
                });

            modelBuilder.Entity("TrailsApi.Models.TrailMarker", b =>
                {
                    b.Property<int>("TrailMarkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TrailId")
                        .HasColumnType("int");

                    b.Property<bool>("isLandmark")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isTrailhead")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("TrailMarkerId");

                    b.HasIndex("TrailId");

                    b.ToTable("TrailMarkers");

                    b.HasData(
                        new
                        {
                            TrailMarkerId = 1,
                            Latitude = 45.522210000000001,
                            Longitude = -122.62578000000001,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        },
                        new
                        {
                            TrailMarkerId = 2,
                            Latitude = 45.522060000000003,
                            Longitude = -122.62634,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        },
                        new
                        {
                            TrailMarkerId = 3,
                            Latitude = 45.521389999999997,
                            Longitude = -122.62942,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        },
                        new
                        {
                            TrailMarkerId = 4,
                            Latitude = 45.521099999999997,
                            Longitude = -122.63052,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        },
                        new
                        {
                            TrailMarkerId = 5,
                            Latitude = 45.520679999999999,
                            Longitude = -122.63084000000001,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        },
                        new
                        {
                            TrailMarkerId = 6,
                            Latitude = 45.521450000000002,
                            Longitude = -122.62761,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        },
                        new
                        {
                            TrailMarkerId = 7,
                            Latitude = 45.52055,
                            Longitude = -122.6259,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        },
                        new
                        {
                            TrailMarkerId = 8,
                            Latitude = 45.520380000000003,
                            Longitude = -122.62324,
                            TrailId = 1,
                            isLandmark = false,
                            isTrailhead = false
                        });
                });

            modelBuilder.Entity("TrailsApi.Models.TrailMarker", b =>
                {
                    b.HasOne("TrailsApi.Models.Trail", "Trail")
                        .WithMany("TrailMarkers")
                        .HasForeignKey("TrailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trail");
                });

            modelBuilder.Entity("TrailsApi.Models.Trail", b =>
                {
                    b.Navigation("TrailMarkers");
                });
#pragma warning restore 612, 618
        }
    }
}
