<div class="container">
      <div id="viewDiv"></div>
</div>  



@section Scripts
{
<style>
  html,
  body,
  #viewDiv {
    padding: 0;
    margin: 0;
    height: 80vh;
    width: 80vw;
  }
</style>

<link rel="stylesheet" href="https://js.arcgis.com/4.24/esri/themes/light/main.css">
<script src="https://js.arcgis.com/4.24/"></script>

<script>

  require([
    "esri/config",
    "esri/Map",
    "esri/views/MapView",

    "esri/Graphic",
    "esri/rest/route",
    "esri/rest/support/RouteParameters",
    "esri/rest/support/FeatureSet",
    "esri/rest/support/TravelMode"

  ], function (esriConfig, Map, MapView, Graphic, route, RouteParameters, FeatureSet, TravelMode) {

    esriConfig.apiKey = "AAPK7691fadea68d4c688c09d108d1cd1d7cSxgmrGZq1iMecdeWEN29tO3QCLIzXUFXyg4PLvxYtshTAFhyxYK6D4d2m-vnNbrK";

    const map = new Map({
      basemap: "arcgis-topographic" //Basemap layer service
    });

    const view = new MapView({
      container: "viewDiv",
      map: map,
      center: [-122.6784, 45.5152], //Longitude, latitude
      zoom: 12
    });

    const routeUrl = "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World";

  
    const travelModeObject = {
    "distanceAttributeName": "Miles",
    "description": "Follows paths and roads that allow pedestrian traffic and finds solutions that optimize travel distance.",
    "impedanceAttributeName": "Miles",
    "simplificationToleranceUnits": "miles",
    "uturnAtJunctions": "allow-backtrack",
    "useHierarchy": false,
    "name": "Walking Distance",
    "simplificationTolerance": 2,
    "timeAttributeName": "WalkTime",
    "restrictionAttributeNames": ["Avoid Private Roads", "Avoid Roads Unsuitable for Pedestrians", "Preferred for Pedestrians", "Walking"],
    "type": "Walk",
    "id": "yFuMFwIYblqKEefX",
    "attributeParameterValues": [{
      "parameterName": "Restriction Usage",
      "attributeName": "Avoid Private Roads",
      "value": "AVOID_MEDIUM"
    }, {
      "parameterName": "Restriction Usage",
      "attributeName": "Walking",
      "value": "PROHIBITED"
    }, {
      "parameterName": "Restriction Usage",
      "attributeName": "Preferred for Pedestrians",
      "value": "PREFER_LOW"
    }, {
      "parameterName": "Walking Speed (km/h)",
      "attributeName": "WalkTime",
      "value": 5
    }, {
      "parameterName": "Restriction Usage",
      "attributeName": "Avoid Roads Unsuitable for Pedestrians",
      "value": "AVOID_HIGH"
    }]
  };


    view.on("click", function (event) {

      if (view.graphics.length === 0) {
        addGraphic("origin", event.mapPoint);
      } else if (view.graphics.length === 1) {
        addGraphic("destination", event.mapPoint);

        getRoute(); // Call the route service

      } else {
        view.graphics.removeAll();
        addGraphic("origin", event.mapPoint);
      }

    });

    function addGraphic(type, point) {
      const graphic = new Graphic({
        symbol: {
          type: "simple-marker",
          color: (type === "origin") ? "white" : "black",
          size: "8px"
        },
        geometry: point
      });
      view.graphics.add(graphic);
    }

    function getRoute() {
      const routeParams = new RouteParameters({
        stops: new FeatureSet({
          features: view.graphics.toArray()
        }),

        returnDirections: true,
        travelMode: travelModeObject

      });

      route.solve(routeUrl, routeParams)
        .then(function (data) {
          data.routeResults.forEach(function (result) {
            result.route.symbol = {
              type: "simple-line",
              color: [5, 150, 255],
              width: 3
            };
            view.graphics.add(result.route);
          });

          // Display directions
          if (data.routeResults.length > 0) {
            const directions = document.createElement("ol");
            directions.classList = "esri-widget esri-widget--panel esri-directions__scroller";
            directions.style.marginTop = "0";
            directions.style.padding = "15px 15px 15px 30px";
            const features = data.routeResults[0].directions.features;

            // Show each direction
            features.forEach(function (result, i) {
              const direction = document.createElement("li");
              direction.innerHTML = result.attributes.text + " (" + result.attributes.length.toFixed(2) + " miles)";
              directions.appendChild(direction);
            });

            view.ui.empty("top-right");
            view.ui.add(directions, "top-right");

          }

        })

        .catch(function (error) {
          console.log(error);
        })

    }

  });
</script>
}